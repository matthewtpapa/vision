name: verify
on:
  pull_request:
    types: [opened, synchronize, reopened]
jobs:
  verify:
    concurrency:
      group: verify-${{ github.ref }}-${{ matrix.python-version }}
      cancel-in-progress: true
    runs-on: ubuntu-latest
    defaults:
      run:
        shell: bash
    env:
      OMP_NUM_THREADS: "1"
      OPENBLAS_NUM_THREADS: "1"
      MKL_NUM_THREADS: "1"
      NUMEXPR_NUM_THREADS: "1"
      TASKSET: "taskset -c 0-1"
    strategy:
      matrix:
        python-version: [ "3.10", "3.11", "3.12" ]
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}
          cache: "pip"
          cache-dependency-path: requirements-dev.txt
      - name: Install CI deps
        run: |
          sudo apt-get update
          sudo apt-get install -y strace
      - name: Show pinned threading env
        run: |
          env | grep -E 'OMP_NUM_THREADS|OPENBLAS_NUM_THREADS|MKL_NUM_THREADS|NUMEXPR_NUM_THREADS|TASKSET'
      - name: Install dev deps
        run: |
          python -m pip install -U pip
          pip install -r requirements-dev.txt
          pip install -e .
      - uses: actions/setup-node@v4
        with:
          node-version: '20'
      - name: Install markdownlint (no lockfile)
        run: |
          npm i --no-save markdownlint-cli2 markdownlint \
            || echo "::warning::Failed to install markdownlint; markdownlint step will run in advisory mode."
      - name: make verify (lint/type/test/md)
        run: make verify
      - name: Bench Oracle
        run: make bench-oracle
      - name: Bench Oracle E2E
        run: make bench-oracle-e2e
      - name: Metrics schema gate
        run: make check-metrics-schema
      - name: Config precedence artifact
        run: make config-artifact
      - name: Purity guard
        run: make purity
      - name: Enforce purity
        run: |
          python - <<'PY'
          import json
          import pathlib
          import sys

          report_path = pathlib.Path("artifacts/purity_report.json")
          data = json.loads(report_path.read_text())
          print(json.dumps(data, indent=2))
          if data.get("network_syscalls"):
              sys.exit("network syscalls detected")
          PY
      - name: purity
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: purity
          path: |
            artifacts/purity_report.json
            artifacts/syscall_report.txt
      - name: Metrics hash
        run: make metrics-hash
      - name: Upload gate artifacts
        uses: actions/upload-artifact@v4
        with:
          name: m2-artifacts-${{ matrix.python-version }}
          path: |
            bench/oracle_stats.json
            bench/oracle_e2e.json
            logs/evidence_ledger.jsonl
            artifacts/config_precedence.json
            artifacts/purity_report.json
            artifacts/metrics_hash.txt
            artifacts/metrics_schema_report.txt
      - name: Gate summary
        run: |
          python - <<'PY' > gate_summary.txt
          import json, pathlib
          stats = json.loads(pathlib.Path("bench/oracle_stats.json").read_text())
          e2e = json.loads(pathlib.Path("bench/oracle_e2e.json").read_text())
          purity = json.loads(pathlib.Path("artifacts/purity_report.json").read_text())
          metrics_hash = pathlib.Path("artifacts/metrics_hash.txt").read_text().split()[-1]
          print("### M2 gate summary")
          print()
          print(f"- recall@5: **{stats['candidate_at_k_recall']:.3f}**")
          print(f"- p95 (offline): **{stats['p95_ms']:.3f} ms**")
          print(f"- p@1 (e2e): **{e2e['p@1']:.3f}**")
          print(f"- e2e p95: **{e2e['e2e_p95_ms']:.3f} ms**  Â·  e2e p99: **{e2e['e2e_p99_ms']:.3f} ms**")
          print(f"- purity (no network syscalls): **{not purity.get('network_syscalls', True)}**")
          print(f"- metrics hash: `{metrics_hash}`")
          PY
          cat gate_summary.txt >> "$GITHUB_STEP_SUMMARY"
          cat gate_summary.txt
  verify-smoke:
    runs-on: ${{ matrix.os }}
    defaults:
      run:
        shell: bash
    strategy:
      matrix:
        os: [ubuntu-latest, macos-14, windows-latest]
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v5
        with:
          python-version: "3.11"
          cache: "pip"
          cache-dependency-path: requirements-dev.txt
      - name: Install
        if: matrix.os != 'windows-latest'
        run: |
          pip install -r requirements-dev.txt
          pip install -e .
      - name: Install (Windows)
        if: matrix.os == 'windows-latest'
        shell: pwsh
        run: |
          pip install -r requirements-dev.txt
          pip install -e .
      - name: make verify (lint/type/tests only)
        if: matrix.os != 'windows-latest'
        run: make verify
      - name: Lint/type/tests (Windows)
        if: matrix.os == 'windows-latest'
        shell: pwsh
        run: |
          ruff check .
          mypy src
          pytest -q
      - name: Import smoke
        if: matrix.os != 'windows-latest'
        run: python -c "import latency_vision as lv; print(getattr(lv,'__version__','unknown'))"
      - name: Import smoke (Windows)
        if: matrix.os == 'windows-latest'
        shell: pwsh
        run: python -c "import latency_vision as lv; print(getattr(lv,'__version__','unknown'))"
