name: verify

on:
  push:
    branches: [main]
    tags:
      - 'v*'
    paths-ignore:
      - '**/*.md'
  pull_request:
    branches: [main]
    paths-ignore:
      - '**/*.md'

concurrency:
  group: verify-${{ github.ref }}
  cancel-in-progress: true

jobs:
  lint-and-test:
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        python-version: ['3.10', '3.11']
    steps:
      - uses: actions/checkout@v4
      - name: Purge stale site-packages (latency_vision*)
        run: |
          python - <<'PY'
          import pathlib, shutil, site, sys
          roots = set(site.getsitepackages() + [site.getusersitepackages()])
          for root in filter(None, roots):
              for p in pathlib.Path(root).glob("latency_vision*"):
                  print("removing", p, file=sys.stderr)
                  shutil.rmtree(p, ignore_errors=True)
          PY
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}
          cache: 'pip'
          cache-dependency-path: |
            requirements-dev.txt
            pyproject.toml
      - name: Install Python dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements-dev.txt
          pip install -e .
      - name: Ruff lint
        run: |
          ruff check .
          ruff format --check .
      - name: Type check
        run: mypy src
      - name: Unit tests
        run: pytest -q

  verify:
    needs: lint-and-test
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        python-version: ['3.10', '3.11']
    env:
      OMP_NUM_THREADS: "1"
      OPENBLAS_NUM_THREADS: "1"
      MKL_NUM_THREADS: "1"
      NUMEXPR_NUM_THREADS: "1"
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - name: Purge stale site-packages (latency_vision*)
        run: |
          python - <<'PY'
          import pathlib, shutil, site, sys
          roots = set(site.getsitepackages() + [site.getusersitepackages()])
          for root in filter(None, roots):
              for p in pathlib.Path(root).glob("latency_vision*"):
                  print("removing", p, file=sys.stderr)
                  shutil.rmtree(p, ignore_errors=True)
          PY
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}
          cache: 'pip'
          cache-dependency-path: |
            requirements-dev.txt
            pyproject.toml
      - name: Install system dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y strace jq wkhtmltopdf
      - name: Install Python dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements-dev.txt
          pip install -e .
      - name: Run prove pipeline
        run: make prove
      - name: sot-pdf
        run: |
          mkdir -p artifacts
          wkhtmltopdf docs/Vision_v1_Investor_SoT.html artifacts/vision_v1_SoT.pdf
          test -s artifacts/vision_v1_SoT.pdf
          python - <<'PY'
import os
st = os.stat("artifacts/vision_v1_SoT.pdf").st_size
assert st > 10_000, f"vision_v1_SoT.pdf too small: {st}"
print("sot_pdf_ok=1")
with open("gate_summary.txt", "a", encoding="utf-8") as handle:
    handle.write("sot_pdf_ok=1\n")
PY
      - name: sign-sot
        run: |
          if [[ -n "${{ secrets.SOT_DEV_SIGNING_KEY }}" ]]; then
            python scripts/sign_json.py artifacts/sot_summary.json --key "${{ secrets.SOT_DEV_SIGNING_KEY }}"
            echo "signature_valid_or_blocked=1" | tee -a gate_summary.txt
          else
            echo "NO_SIGNING_KEY for S1 signing gate" >&2
            exit 1
          fi
      - name: determinism-check
        run: |
          python scripts/write_metrics_hash.py --out artifacts/metrics_hash_run1.txt
          python scripts/write_metrics_hash.py --out artifacts/metrics_hash_run2.txt
          python - <<'PY'
a = open("artifacts/metrics_hash_run1.txt", encoding="utf-8").read().strip()
b = open("artifacts/metrics_hash_run2.txt", encoding="utf-8").read().strip()
if a != b:
    raise SystemExit(f"Determinism breach: {a} != {b}")
open("artifacts/metrics_hash.txt", "w", encoding="utf-8").write(a + "\n")
print("determinism_ok=1")
with open("gate_summary.txt", "a", encoding="utf-8") as handle:
    handle.write("determinism_ok=1\n")
PY
      - name: purity-enforce
        run: |
          python - <<'PY'
import json
report = json.load(open("artifacts/purity_report.json", encoding="utf-8"))
if report.get("network_syscalls") is not False:
    raise SystemExit("Network syscalls detected")
offenders = report.get("offenders") or []
if offenders:
    raise SystemExit(f"Purity offenders present: {offenders}")
print("purity_clean=1")
with open("gate_summary.txt", "a", encoding="utf-8") as handle:
    handle.write("purity_clean=1\n")
PY
      - name: roadmap-lock
        run: make roadmap-lock
      - name: roadmap-check
        run: make roadmap-check
      - name: KB promote sanity
        run: make kb-promote
      - name: Unknowns guard
        run: make unknowns-guard
      - name: Public API freeze
        run: make api-freeze
      - name: Compute GIT_DIFF_BASE (PRs)
        if: ${{ github.event_name == 'pull_request' }}
        run: |
          BASE_SHA="${{ github.event.pull_request.base.sha }}"
          HEAD_SHA="${{ github.sha }}"
          echo "GIT_DIFF_BASE=$(git merge-base "$BASE_SHA" "$HEAD_SHA")" >> $GITHUB_ENV
      - name: Schema bump guard
        run: make schema-bump
      - name: Gate summary â†’ Job summary
        if: always()
        run: |
          test -f gate_summary.txt && cat gate_summary.txt >> "$GITHUB_STEP_SUMMARY" || true
      - name: Upload artifacts
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: prove-artifacts-${{ matrix.python-version }}
          if-no-files-found: ignore
          path: |
            bench/oracle_stats.json
            bench/oracle_e2e.json
            bench/e2e_samples.jsonl
            logs/evidence_ledger.jsonl
            artifacts/metrics_hash.txt
            artifacts/metrics_hash_payload.json
            artifacts/purity_report.json
            artifacts/purity_offenders.txt
            artifacts/sbom.json
            artifacts/licenses.json
            artifacts/wheels_hashes.txt
            artifacts/promotion_report.json
            artifacts/vision_v1_SoT.pdf
            artifacts/metrics_hash_run1.txt
            artifacts/metrics_hash_run2.txt

            gate_summary.txt

