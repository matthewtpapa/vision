name: verify

on:
  pull_request:
    types: [opened, synchronize, reopened, ready_for_review]
  push:
    branches: [main, master, release/*]
  workflow_dispatch: {}

permissions:
  contents: read

concurrency:
  group: verify-${{ github.ref }}
  cancel-in-progress: ${{ github.event_name == 'pull_request' }}

jobs:
  tests:
    runs-on: ubuntu-latest
    env:
      TZ: UTC
      LC_ALL: C.UTF-8
      LANG: C.UTF-8
      PYTHONHASHSEED: "0"
    strategy:
      fail-fast: false
      matrix:
        python-version: ['3.10', '3.11']
    steps:
      - uses: actions/checkout@v4
      - name: Normalize git & line endings for deterministic hashing
        run: |
          git config --global core.autocrlf false
          git config --global core.eol lf
          git config --global safe.directory '*'
      - name: Purge stale site-packages (latency_vision*)
        run: |
          python - <<'PY'
          import pathlib, shutil, site, sys
          roots = set(site.getsitepackages() + [site.getusersitepackages()])
          for root in filter(None, roots):
              for p in pathlib.Path(root).glob("latency_vision*"):
                  print("removing", p, file=sys.stderr)
                  shutil.rmtree(p, ignore_errors=True)
          PY
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}
          cache: 'pip'
          cache-dependency-path: |
            requirements-dev.txt
            pyproject.toml
      - name: Install Python dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements-dev.txt
          pip install -e .
      - name: Ruff lint
        run: |
          ruff check .
          ruff format --check .
      - name: Type check
        run: mypy src
      - name: Unit tests
        run: pytest -q

  verify:
    needs: [tests]
    runs-on: ubuntu-latest
    permissions:
      contents: read
    env:
      TZ: UTC
      LC_ALL: C.UTF-8
      LANG: C.UTF-8
      PYTHONUTF8: "1"
    steps:
      - uses: actions/checkout@v4
        with: { fetch-depth: 0 }
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"
          cache: "pip"
          cache-dependency-path: |
            requirements-dev.txt
            pyproject.toml
      - name: Install deps
        run: |
          python -m pip install -U pip
          pip install -r requirements-dev.txt
          pip install -e .
      - name: Ensure artifact dir
        run: |
          mkdir -p artifacts
          : > artifacts/.keep
      - name: Tripwire
        run: make tripwire
      - name: Prove (S2 scaffolding only)
        run: |
          make prove
      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: verify-artifacts
          path: |
            artifacts/**
            gate_summary.txt
          if-no-files-found: error

  docs-drift:
    runs-on: ubuntu-latest
    env:
      TZ: UTC
      LC_ALL: C.UTF-8
      LANG: C.UTF-8
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - name: Detect docs changes
        id: docs
        run: |
          set -euo pipefail
          if [[ "${{ github.event_name }}" == "pull_request" ]]; then
            base="${{ github.event.pull_request.base.sha }}"
          else
            base="$(git rev-parse HEAD^ || git rev-parse HEAD)"
          fi
          head="$(git rev-parse HEAD)"
          if [[ "$base" != "$head" ]]; then
            merge_base="$(git merge-base "$base" "$head")"
          else
            merge_base="$head"
          fi
          if git diff --name-only "$merge_base" "$head" | grep -E '^(docs/|roadmap.yaml$|\.github/workflows/)' >/dev/null; then
            echo "changed=true" >>"$GITHUB_OUTPUT"
          else
            echo "changed=false" >>"$GITHUB_OUTPUT"
          fi
      - name: Ensure SoT anchors exist
        if: steps.docs.outputs.changed == 'true'
        run: |
          python - <<'PY'
          from pathlib import Path

          html = Path('docs/Vision_v1_Investor_SoT.html').read_text(encoding='utf-8')
          missing = [f"S{n:02d}" for n in range(1, 18) if f'id="S{n:02d}"' not in html]
          if missing:
              raise SystemExit(f"Missing stage anchors: {missing}")
          PY
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'
          cache: 'pip'
          cache-dependency-path: |
            requirements-dev.txt
            pyproject.toml
        if: steps.docs.outputs.changed == 'true'
      - name: Install Python dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements-dev.txt
          pip install -e .
        if: steps.docs.outputs.changed == 'true'
      - name: Sync SoT acceptance cells from stage specs
        run: |
          python scripts/sync_sot_acceptance.py
        if: steps.docs.outputs.changed == 'true'
      - name: Roadmap lock
        run: make roadmap-lock
        if: steps.docs.outputs.changed == 'true'
      - name: Roadmap check
        run: make roadmap-check
        if: steps.docs.outputs.changed == 'true'
      - name: Ensure roadmap lock committed
        if: steps.docs.outputs.changed == 'true'
        run: |
          git add -N roadmap.lock.json || true
          git diff --exit-code -- roadmap.lock.json || {
            echo "::error::Roadmap lock drift detected; run 'make roadmap-lock' and commit.";
            exit 1;
          }
      - name: Ensure docs drift committed
        run: |
          git add -N docs/ docs/specs/ || true
          git diff --exit-code -- docs/ docs/specs/ || {
            echo "::error::Docs drift detected. Run 'make roadmap-lock && make roadmap-check' and commit the changes.";
            exit 1;
          }
        if: steps.docs.outputs.changed == 'true'
      - name: No docs changes â€” skipping docs-drift
        if: steps.docs.outputs.changed != 'true'
        run: echo "No docs or workflow changes detected; skipping docs-drift enforcement."

