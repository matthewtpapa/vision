name: verify
on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
jobs:
  verify:
    runs-on: ubuntu-latest
    env:
      # Force public PyPI; disable any inherited private mirrors that may 403.
      PIP_INDEX_URL: https://pypi.org/simple
      PIP_EXTRA_INDEX_URL: ""
      PIP_DISABLE_PIP_VERSION_CHECK: "1"
      PIP_NO_CACHE_DIR: "1"
    strategy:
      matrix:
        python-version: ["3.10", "3.11", "3.12"]
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}
      - name: Pip diagnostics (capture)
        run: |
          python -m pip debug --verbose || true
      - name: Install base + dev deps
        run: |
          python -m pip install --upgrade pip
          python -m pip install --upgrade setuptools wheel build
          pip install -e .
          pip install -r requirements-dev.txt
          # Ensure demo deps present; force manylinux/macOS/Windows wheels only.
          # Pin to widely-available wheels for 3.10â€“3.12.
          python -m pip install --only-binary=:all: \
            typing_extensions==4.12.2 \
            numpy==1.26.4 \
            pillow==10.4.0

      - name: Tool versions
        run: |
          python --version
          pip --version
          python - <<'PY'
          import sys, setuptools
          print("setuptools", setuptools.__version__, "py", ".".join(map(str, sys.version_info[:3])))
          PY
          ruff --version
          mypy --version
      # Use the official action to avoid npm 403s and honor repo config
      - name: Markdownlint (scoped)
        uses: DavidAnson/markdownlint-cli2-action@v15
        with:
          config: .markdownlint-cli2.yaml
      - name: Type/Lint preflight
        env:
          MPLBACKEND: Agg
          MYPYPATH: src
        run: |
          ruff check .
          mypy --config-file mypy.ini --pretty -p vision

      - name: Import smoke (alias + legacy)
        run: |
          python - <<'PY'
          import pathlib
          import latency_vision as lv
          import vision as v
          print("lv_version:", lv.__version__)
          print("vision_path:", pathlib.Path(v.__file__).resolve())
          PY

      - name: Verify (make target)
        env:
          MPLBACKEND: Agg
          MYPYPATH: src
        run: make verify
