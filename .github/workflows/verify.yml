name: verify

on:
  pull_request:
    types: [opened, synchronize, reopened, ready_for_review]
  push:
    branches:
      - main
      - develop
  workflow_dispatch: {}

# Keep this simple; expression is valid here.
concurrency:
  group: ${{ github.workflow }}-${{ github.event.pull_request.number || github.ref }}
  cancel-in-progress: true

jobs:
  verify:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v5
        with:
          python-version: "3.11"
      - run: python -V

  verify-smoke:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v5
        with:
          python-version: "3.11"

      # Ensure we import from ./src even if a stale wheel is present
      - name: Force src on path
        run: echo "PYTHONPATH=$PWD/src" >> $GITHUB_ENV

      # Clean any stale installs
      - name: Clean previous installs
        run: |
          python -m pip uninstall -y latency-vision || true
          rm -rf build dist .eggs *.egg-info
          python - <<'PY'
          import pathlib, shutil, site, sys
          for p in pathlib.Path(".").rglob("__pycache__"):
              shutil.rmtree(p, ignore_errors=True)
          for s in filter(None, site.getsitepackages() + [site.getusersitepackages()]):
              for p in pathlib.Path(s).glob("latency_vision*"):
                  print("removing stale", p, file=sys.stderr)
                  shutil.rmtree(p, ignore_errors=True)
          PY

      - name: Install deps (editable)
        run: |
          python -m pip install -U pip
          pip install -r requirements-dev.txt
          pip install -e . --no-deps

      - name: Show env / versions
        run: |
          python -V
          pip --version
          python - <<'PY'
          import sys, platform, numpy, pytest, mypy
          print("platform:", platform.platform())
          print("python:", sys.version.replace("\n"," "))
          print("numpy:", numpy.__version__)
          import ruff, importlib.util
          print("ruff module:", getattr(ruff, "__version__", "unknown"))
          print("pytest:", pytest.__version__)
          print("mypy path ok?", importlib.util.find_spec("mypy") is not None)
          PY

      - name: Lint
        run: ruff check .

      - name: Type check
        run: mypy src

      # Targeted calibration debug first so failures are loud and clear
      - name: Calibration smoke (targeted)
        env:
          VISION__CALIB__LOCK: "1"
          VISION__CALIB__DEBUG: "1"
        run: |
          python - <<'PY'
          import numpy as np
          from latency_vision.calibration import fit_temperature, temperature_scale, softmax, distances_to_logits
          rng = np.random.default_rng(123)
          logits = distances_to_logits(-rng.normal(size=(256,3)))
          true_T = 2.5
          p = softmax(temperature_scale(logits, true_T))
          labels = np.array([rng.choice(p.shape[1], p=p[i]) for i in range(p.shape[0])])
          fitted = fit_temperature(logits, labels, seed=999)
          print("T_true=", true_T, " T_fit=", fitted)
          assert 2.2 < fitted < 2.8, f"unexpected T_fit={fitted}"
          PY

      - name: Tests (full)
        env:
          VISION__CALIB__LOCK: "1"
        run: pytest -q
