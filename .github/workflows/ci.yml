# SPDX-License-Identifier: Apache-2.0
# Copyright (c) 2025 The Vision Authors
name: verify
permissions:
  contents: read
concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true
on:
  push:
  pull_request:
jobs:
  markdownlint:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: DavidAnson/markdownlint-cli2-action@v15
        with:
          config: .markdownlint-cli2.yaml

  verify:
    strategy:
      fail-fast: false
      matrix:
        python-version: ["3.10", "3.11", "3.12"]
    runs-on: ubuntu-latest
    name: verify (${{ matrix.python-version }})
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}
          cache: "pip"
          cache-dependency-path: |
            requirements-dev.txt
      - run: python -m pip install --upgrade pip setuptools wheel
      - run: python -m pip install -r requirements-dev.txt
      - run: pip install -e .
      - run: make setup  # still ok; now it's a no-op if the above succeeded
      - name: Environment report
        run: |
          python -V
          python -m pip --version
          python - <<'PY'
from packaging import tags
print(f"platform tag: {next(tags.sys_tags())}")
PY
          python -m pip debug --verbose
      - name: Prepare ANN deps (optional)
        run: |
          python -m pip install --upgrade pip
          python -m pip install faiss-cpu || echo "faiss-cpu unavailable; using NumPy fallback"
      - run: make verify
      - run: PYTEST_ADDOPTS="-ra" make test-cov | tee pytest.log
      - name: Fail on skips
        run: |
          python - <<'PY' > pytest-summary.txt
import re, pathlib
text = pathlib.Path('pytest.log').read_text()
line = ''
for l in text.splitlines():
    if re.search(r'==+ .* in .* seconds ==+', l):
        line = l
m = re.search(r'(skipped=\d+|\d+\s+skipped)', line or '')
skipped = 0
if m:
    skipped = int(re.search(r'\d+', m.group()).group())
print(f'skipped={skipped}')
exit(skipped != 0)
PY
          grep -q 'skipped=0' pytest-summary.txt
      - name: Show pytest tail on failure
        if: failure()
        run: |
          echo "::group::pytest tail"
          tail -n 200 pytest.log || true
          echo "::endgroup::"
      - uses: actions/upload-artifact@v4
        if: always()
        with:
          name: coverage-${{ matrix.python-version }}
          path: |
            .coverage
            coverage.xml
            htmlcov
            pytest.log
          if-no-files-found: ignore
      - run: latvision --version
      - run: python -m latency_vision --version
      - run: latvision webcam --dry-run
      - run: latvision webcam --use-fake-detector --dry-run
      - name: Build LabelBank shard (CI scale)
        run: LB_N=5000 python scripts/build_labelbank_shard.py --in data/labelbank/seed.jsonl --out bench/labelbank/shard --seed 1234 --dim 256
      - name: Bench LabelBank (CI scale)
        run: |
          LB_Q=500 python scripts/bench_labelbank.py --shard bench/labelbank/shard --out bench/labelbank_stats.json --seed 999 --k 10
          LB_Q=500 python scripts/bench_labelbank.py --shard bench/labelbank/shard --out bench/labelbank_stats_2.json --seed 999 --k 10
      - name: Upload LabelBank stats
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: labelbank-stats
          path: |
            bench/labelbank_stats.json
            bench/labelbank_stats_2.json
          if-no-files-found: error
      - name: Enforce LabelBank gates
        run: |
          python - <<'PY'
          import json
          s1=json.load(open("bench/labelbank_stats.json"))
          s2=json.load(open("bench/labelbank_stats_2.json"))
          assert s1["lookup_p95_ms"] <= 10.0, f"lookup_p95_ms={s1['lookup_p95_ms']}"
          assert s1["recall_at_10"] >= 0.99, f"recall_at_10={s1['recall_at_10']}"
          assert s1["bench_hash"] == s2["bench_hash"], "bench_hash mismatch"
          print("LabelBank gates ok:", s1["lookup_p95_ms"], s1["recall_at_10"], s1["bench_hash"])
          PY
      - name: Build Verify manifest
        run: python scripts/verify_build_manifest.py --seed data/verify/seed_gallery/seed.jsonl --data data/verify/seed_gallery --out bench/verify/gallery_manifest.jsonl
      - name: Calibrate Verify
        run: python scripts/verify_calibrate.py --manifest bench/verify/gallery_manifest.jsonl --out bench/verify/calibration.json --seed 4242
      - name: Verify eval
        run: make verify-eval
      - name: Upload Verify artifacts
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: verify-artifacts
          path: |
            bench/verify/calibration.json
            bench/out/metrics.json
            bench/out/stage_times.csv
          if-no-files-found: error
      - name: Enforce Verify gates
        run: |
          python - <<'PY'
import json
m=json.load(open("bench/out/metrics.json"))
v=m["verify"]
assert v["accepted"] + v["rejected"] == v["called"], "verify accounting mismatch"
band=m.get("unknown_rate_band", [0.10,0.40])
assert band[0] <= m.get("unknown_rate", 0.0) <= band[1], "unknown_rate band"
assert m["p95_ms"] <= 33.0, f"p95_ms={m['p95_ms']}"
assert m["p99_ms"] <= 66.0, f"p99_ms={m['p99_ms']}"
assert m["cold_start_ms"] <= 1100.0, f"cold_start_ms={m['cold_start_ms']}"
assert m["index_bootstrap_ms"] <= 50.0, f"index_bootstrap_ms={m['index_bootstrap_ms']}"
print("Gates ok")
PY
      - name: Ban runtime RIS
        run: scripts/check_no_runtime_ris.sh
      - name: Install strace
        run: sudo apt-get update && sudo apt-get install -y strace
      - name: Hot-loop syscall audit
        run: scripts/audit_syscalls.sh
      - name: Upload syscall audit
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: syscall-report
          path: artifacts/syscall_report.txt
          if-no-files-found: warn

  package:
    needs: verify
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v5
        with:
          python-version: "3.11"
          cache: "pip"
          cache-dependency-path: |
            requirements-dev.txt
      - run: python -m pip install --upgrade pip
      - run: python -m pip install build twine
      - run: python -m build
      - run: python -m twine check dist/*
      - uses: actions/upload-artifact@v4
        with:
          name: python-dist
          path: dist/*
          if-no-files-found: error
