name: ci-matrix
on:
  pull_request:
  push:
    branches: [ main ]
jobs:
  test:
    name: ${{ matrix.os }} / py${{ matrix.python-version }}
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, macos-13, macos-14, windows-latest]
        python-version: ["3.10", "3.11", "3.12"]
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}

      - name: Install dev deps
        run: |
          python -m pip install --upgrade pip
          python -m pip install --upgrade setuptools wheel build
          pip install -e .
          pip install -r requirements-dev.txt

      - name: Lint / type / tests
        env:
          MPLBACKEND: Agg
          MYPYPATH: src
        run: |
          ruff check .
          mypy --config-file mypy.ini --pretty -p vision
          pytest -q

      - name: Build wheel (non-macOS)
        if: ${{ matrix.os != 'macos-13' && matrix.os != 'macos-14' }}
        run: |
          python -m build
          python - <<'PY'
          import pathlib; ws=list(pathlib.Path("dist").glob("*.whl"))
          assert ws, "no wheels built"
          print("Wheels:", [w.name for w in ws])
          PY

      - name: Build wheel (macOS universal2 via cibuildwheel)
        if: ${{ matrix.os == 'macos-13' || matrix.os == 'macos-14' }}
        env:
          CIBW_ARCHS_MACOS: universal2
          CIBW_SKIP: "pp*"
          # Build only the CPython versions we test in matrix
          CIBW_BUILD: "cp310-* cp311-* cp312-*"
        run: |
          python -m pip install cibuildwheel
          cibuildwheel --output-dir wheelhouse
          python - <<'PY'
          import pathlib; ws=list(pathlib.Path("wheelhouse").glob("*.whl"))
          assert ws, "no universal2 wheels built"
          print("Wheels:", [w.name for w in ws])
          PY

      - name: Fresh venv install + import smoke (diagnostic)
        shell: bash
        run: |
          set -euo pipefail
          python - <<'PY'
          import os, sys, subprocess, venv, pathlib, shutil
          root = pathlib.Path.cwd()
          vdir = root / ".venv-smoke"
          if vdir.exists():
              shutil.rmtree(vdir)
          venv.EnvBuilder(with_pip=True).create(vdir)
          py = str(vdir / ("Scripts/python.exe" if os.name == "nt" else "bin/python"))
          # pick wheel dir depending on OS
          wdir = root / ("wheelhouse" if sys.platform == "darwin" else "dist")
          wheels = sorted(wdir.glob("*.whl"))
          if not wheels:
              contents = [str(p) for p in wdir.glob('*')]
              raise SystemExit(f"No wheels built in {wdir}! Contents: {contents}")
          wheel = str(wheels[-1])
          print("Installing wheel:", wheel)
          subprocess.check_call([py, "-m", "pip", "install", "--upgrade", "pip", "setuptools", "wheel", "typing_extensions"])
          subprocess.check_call([py, "-m", "pip", "install", wheel])
          # Show what got installed (helps debug namespace/package discovery issues)
          subprocess.check_call([py, "-c", "import pkgutil; print('pkgs:', sorted([m.name for m in pkgutil.iter_modules()])[:50], '...')"])
          # Canonical alias must import; legacy alias must import (may warn)
          cmd = r"""import latency_vision as lv, vision as v, pathlib
print('lv_version', lv.__version__)
print('vision_path', pathlib.Path(v.__file__).resolve())"""
          subprocess.check_call([py, "-c", cmd])
          PY
