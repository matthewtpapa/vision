name: ci-matrix

on:
  push:
    branches: [ main ]
  pull_request:

jobs:
  test-build-smoke:
    name: ${{ matrix.os }} / py${{ matrix.python-version }}
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, macos-13, macos-14, windows-latest]
        python-version: ["3.10", "3.11", "3.12"]

    steps:
      - uses: actions/checkout@v4

      - uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}
          cache: pip
          cache-dependency-path: |
            requirements-dev.txt

      - name: Install (editable + dev)
        run: |
          python -m pip install -U pip
          pip install -e .
          pip install -r requirements-dev.txt
          # minimal runtime deps for eval/plot if needed by tests
          pip install pillow numpy

      - name: Lint
        run: |
          ruff check .
          ruff format --check .

      - name: Typecheck
        run: |
          if command -v mypy >/dev/null 2>&1; then mypy src/vision; else echo "mypy not installed"; fi

      - name: Unit tests
        run: |
          pytest -q

      # --- Build wheels ---
      - name: Build wheels (non-macOS → dist/)
        if: ${{ runner.os != 'macOS' }}
        run: |
          python -m pip install build
          python -m build --wheel
          ls -la dist || true

      - name: Build universal2 wheels (macOS → wheelhouse/)
        if: ${{ runner.os == 'macOS' }}
        env:
          CIBW_ARCHS_MACOS: universal2
          CIBW_SKIP: "pp*"
        run: |
          python -m pip install cibuildwheel
          python -m cibuildwheel --platform macos --output-dir wheelhouse
          ls -la wheelhouse || true

      # --- Fresh venv smoke: install JUST-BUILT wheel and import ---
      - name: Smoke install + import
        shell: bash
        run: |
          set -euo pipefail
          if [ "${{ runner.os }}" = "Windows" ]; then VENV=".venv"; python -m venv "$VENV"; source "$VENV/Scripts/activate";
          else VENV=".venv"; python -m venv "$VENV"; source "$VENV/bin/activate"; fi
          python -m pip install --upgrade pip
          if [ "${{ runner.os }}" = "macOS" ]; then
            pip install wheelhouse/*.whl
          else
            pip install dist/*.whl
          fi
          python - <<'PY'
import latency_vision, vision
# canonical import + alias must both work
print(latency_vision.__version__)
PY

      - name: Version banners (sanity; alias still works)
        run: |
          latvision --version
          python -m vision --version

      - uses: actions/upload-artifact@v4
        if: always()
        with:
          name: wheels-${{ matrix.os }}-py${{ matrix.python-version }}
          path: |
            dist/*.whl
            wheelhouse/*.whl
          if-no-files-found: ignore

